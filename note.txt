Django Task for Software Engineer
Project: Payment Gateway Integration and Files Uploading System
Objective
Build a Django-based system where users can upload files only after completing a payment. The system
must support:
‚Ä¢ File upload (after successful payment via aamarPay sandbox)
‚Ä¢ Word count processing via Celery
‚Ä¢ Payment and activity logging
‚Ä¢ RESTful API interface
‚Ä¢ Bootstrap-based frontend
‚Ä¢ Django Admin for data inspection
‚Ä¢ Dockerization



Functional Requirements
1.User Authentication
‚Ä¢ Use Django's built-in user model.
‚Ä¢ Implement login functionality using DRF Token Authentication or JWT.
‚Ä¢ User registration/login is NOT the focus ‚Äî use simple defaults if needed.
2. File Upload with Payment Requirement
‚Ä¢ Users must pay ‡ß≥100 via aamarPay sandbox before uploading a file.
‚Ä¢ After successful payment:
‚Ä¢ A file upload form/API becomes available.
‚Ä¢ Uploaded file is stored on disk.
‚Ä¢ A Celery task is triggered to process the file.
‚Ä¢ Files supported: .txt, .docx.



3.aamarPay Sandbox Integration
Use the aamarPay sandbox payment gateway:
 API Docs: https://aamarpay.readme.io/reference/initiate-payment-json
Use
‚Ä¢ store_id: aamarpaytest
‚Ä¢ signature_key: dbb74894e82415a2f7ff0ec3a97e4183
‚Ä¢ endpoint: https://sandbox.aamarpay.com/jsonpost.php
‚Ä¢ Required Endpoints:
‚Ä¢ POST /api/initiate-payment/
‚Ä¢ Initiates a payment request to aamarPay (‡ß≥100)
Returns the redirect URL to the aamarPay sandbox payment page
‚Ä¢ GET /api/payment/success/
‚Ä¢ Called by aamarPay after successful payment
‚Ä¢ Creates a PaymentTransaction record
‚Ä¢ Enables the file upload feature for the user


4. üîÅ Celery Background Task (Word Count)
After a successful upload:
A Celery task should:
‚Ä¢ Read the file
‚Ä¢ Count the number of words
‚Ä¢ Save the word count to the database (FileUpload.word_count)
‚Ä¢ Update the status to completed
‚Ä¢ Log an ActivityLog entry
‚Ä¢ For .docx, use python-docx; for .txt, use standard Python file read.


5. üóÉ Models
You must include at least the following models:
FileUpload
Field Type
user FK to User
file FileField
filename CharField
upload_time DateTimeField
status CharField (processing, completed, failed)
word_count PositiveIntegerField



PaymentTransaction
Field Type
user FK to User
transaction_id CharField
amount DecimalField
status CharField
gateway_response JSONField/Text
timestamp DateTimeField
ActivityLog
Field Type
user FK to User
action CharField
metadata JSONField
timestamp DateTimeField


6. üß™ REST API Endpoints (DRF)
MethodEndpoint Description
POST /api/initiate-payment/ Create aamarPay payment request
GET /api/payment/success/ Callback from aamarPay after payment
POST /api/upload/ Upload a file after successful payment
GET /api/files/ List user‚Äôs uploaded files
GET /api/activity/ List user‚Äôs activity logs
GET /api/transactions/ List user‚Äôs payment history


7.Django Admin Panel
Enable admin access for:
‚Ä¢ FileUpload
‚Ä¢ ActivityLog
‚Ä¢ PaymentTransaction
Staff should not be allowed to delete or update user-submitted uploads or payment data.


8.Frontend (Bootstrap UI)
Create a basic page (e.g., /dashboard/) that shows:
‚Ä¢ A file upload form (only visible after successful payment)
‚Ä¢ A table showing uploaded files and word counts
‚Ä¢ A table showing user activity
‚Ä¢ A table showing payment history
Use Django templates + Bootstrap. No JavaScript frameworks required.


9.Optional: Dockerization 
Add Docker support using:
‚Ä¢ Dockerfile for the Django app
‚Ä¢ docker-compose.yml including:
‚Ä¢ Django app
‚Ä¢ Redis (for Celery)
‚Ä¢ MySQL (or use SQLite if preferred)
‚Ä¢ .env file support for configuration










docker-compose run django